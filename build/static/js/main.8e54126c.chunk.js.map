{"version":3,"sources":["Game.tsx","MainMenu.tsx","App.tsx","index.tsx"],"names":["gameConfig","maxWidth","tilesQuantity","width","height","showKeyboardOrGamepadHints","controlsMap","getRandomTilePos","_","random","useStyles","makeStyles","canvas","overflow","score","position","top","left","right","fontFamily","fontWeight","pointerEvents","backButton","fontSize","Game","classes","canvasRef","useRef","_useState","useState","_useState2","_slicedToArray","setScore","useEffect","current","ctx","getContext","getTileSize","tilePositions","times","offsetPerc","activeInput","render","clearRect","lineWidth","beginPath","tileSize","offset","xRel","x","moveTo","lineTo","yRel","y","stroke","forEach","xPos","yPos","posFromEnd","length","clickedAnim","undefined","fillStyle","startPos","fillRect","drawTile","Math","min","font","textAlign","tileNumber","slice","keyboardKey","toString","split","fillText","resize","window","innerWidth","innerHeight","registerHit","interval","setInterval","clearInterval","pop","unshift","console","log","pointerHandle","event","_ref","clientY","canvasX","clientX","canvasY","ceil","canvasClick","offsetY","offsetX","cancelTouchMove","preventDefault","addEventListener","keyboard","Keyboard","gamepad","Gamepad","inputReleased","somethingWasPressed","_controlsMap$tileNumb","_controlsMap$tileNumb2","gamepadButton","controlsOr","key","button","query","isConnected","detectKeyboardInput","removeEventListener","_jsxs","_Fragment","children","Button","className","hidden","href","color","_jsx","ArrowBackIos","Grid","container","justifyContent","ref","Typography","align","variant","gameModes","label","id","BigText","props","_objectSpread","gutterBottom","MainMenu","direction","justify","alignContent","style","padding","map","modeId","component","RouterLink","to","concat","size","prop","Slider","defaultValue","valueLabelDisplay","step","max","onChange","val","marks","Checkbox","defaultChecked","checked","Link","bottom","App","CssBaseline","MemoryRouter","Switch","Route","path","exact","Redirect","from","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.8e54126c.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\n\r\nimport { Gamepad, Keyboard, or as controlsOr } from \"contro\";\r\nimport _ from \"lodash\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { Button, Grid, makeStyles, Typography } from \"@material-ui/core\";\r\nimport { ArrowBackIos } from \"@material-ui/icons\";\r\n\r\nexport const gameConfig = {\r\n    maxWidth: 600,\r\n    tilesQuantity: {\r\n        width: 4,\r\n        height: 4\r\n    },\r\n    showKeyboardOrGamepadHints: true\r\n};\r\n\r\nconst controlsMap: Record<string, string> = {\r\n    // keyboard key then xbox controller button\r\n    1: \"A A\",\r\n    2: \"S B\",\r\n    3: \"D X\",\r\n    4: \"F Y\",\r\n    5: \"G up\",\r\n    6: \"H down\",\r\n    7: \"J left\",\r\n    8: \"K right\"\r\n};\r\n\r\nconst getRandomTilePos = () => _.random(gameConfig.tilesQuantity.width - 1);\r\n\r\nconst useStyles = makeStyles({\r\n    canvas: {\r\n        width: \"100%\",\r\n        height: \"100vh\",\r\n        overflow: \"hidden\",\r\n        maxWidth: gameConfig.maxWidth\r\n    },\r\n    score: {\r\n        position: \"fixed\",\r\n        top: 0,\r\n        left: 0,\r\n        right: 0,\r\n        fontFamily: \"Graduate\",\r\n        fontWeight: \"bold\",\r\n        pointerEvents: \"none\"\r\n    },\r\n    backButton: {\r\n        position: \"fixed\",\r\n        top: 0,\r\n        left: 0,\r\n        fontSize: \"1.2em\"\r\n    }\r\n});\r\n\r\nconst Game: React.FC = () => {\r\n    const classes = useStyles();\r\n\r\n    const canvasRef = useRef<HTMLCanvasElement>(null);\r\n\r\n    const [score, setScore] = useState(0);\r\n\r\n    useEffect(() => {\r\n        // todo: replace with engine\r\n\r\n        const canvas = canvasRef.current!;\r\n        const ctx = canvas.getContext(\"2d\")!;\r\n\r\n        const getTileSize = () => {\r\n            return {\r\n                width: canvas.width / tilesQuantity.width,\r\n                height: canvas.height / tilesQuantity.height,\r\n            };\r\n        };\r\n\r\n        const { tilesQuantity } = gameConfig;\r\n\r\n        const resetTilePositions = () => _.times(tilesQuantity.height + 1, getRandomTilePos);\r\n\r\n        let tilePositions = resetTilePositions();\r\n\r\n        let offsetPerc = 0;\r\n\r\n        let activeInput: \"touch\" | \"keyboard\" | \"gamepad\" = \"touch\";\r\n\r\n        const render = () => {\r\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n            ctx.lineWidth = 0.5;\r\n            ctx.beginPath();\r\n\r\n            const tileSize = getTileSize();\r\n\r\n            const offset = offsetPerc * tileSize.height;\r\n\r\n            _.times(tilesQuantity.width, xRel => {\r\n                const x = xRel / tilesQuantity.width * canvas.width;\r\n                ctx.moveTo(x, 0);\r\n                ctx.lineTo(x, canvas.height);\r\n            });\r\n            _.times(tilesQuantity.height, yRel => {\r\n                const y = yRel * tileSize.height + offset;\r\n                ctx.moveTo(0, y);\r\n                ctx.lineTo(canvas.width, y);\r\n            });\r\n            ctx.stroke();\r\n\r\n            // not the best implementation tbh\r\n            const drawTile = (xPos: number, yPos: number, clickedAnim?: number) => {\r\n                if (clickedAnim !== undefined) {\r\n                    ctx.fillStyle = \"#afaeae\";\r\n                }\r\n                const startPos = {\r\n                    x: xPos * tileSize.width,\r\n                    y: yPos * tileSize.height + offset\r\n                };\r\n                ctx.fillRect(\r\n                    startPos.x,\r\n                    startPos.y,\r\n                    tileSize.width,\r\n                    tileSize.height\r\n                );\r\n                ctx.fillStyle = \"black\";\r\n                if (clickedAnim) {\r\n                    ctx.fillRect(\r\n                        startPos.x + clickedAnim,\r\n                        startPos.y + clickedAnim,\r\n                        tileSize.width - clickedAnim * 2,\r\n                        tileSize.height - clickedAnim * 2\r\n                    );\r\n                }\r\n            };\r\n\r\n            tilePositions.forEach((xPos, yPos) => {\r\n                const posFromEnd = tilePositions.length - 1 - yPos;\r\n                drawTile(\r\n                    xPos,\r\n                    yPos - 1,\r\n                    posFromEnd === 0 ? 0 :\r\n                        posFromEnd === 1 && offset ? Math.min(offset, 10) :\r\n                            undefined\r\n                );\r\n            });\r\n\r\n            if (activeInput !== \"touch\" && gameConfig.showKeyboardOrGamepadHints) {\r\n                ctx.fillStyle = \"white\";\r\n                ctx.font = \"60px sans-serif\";\r\n                ctx.textAlign = \"center\";\r\n                const tileNumber = tilePositions.slice(-2)[0] + 1;\r\n                const keyboardKey = tilesQuantity.width > 4 ? tileNumber.toString() : controlsMap[tileNumber].split(\" \")[0];\r\n                ctx.fillText(\r\n                    activeInput === \"keyboard\" ? keyboardKey :\r\n                        controlsMap[tileNumber].split(\" \")[1],\r\n                    tileSize.width * tilePositions.slice(-2)[0] + tileSize.width / 2,\r\n                    tileSize.height * (tilesQuantity.height - 2) + tileSize.height / 2\r\n                );\r\n                ctx.fillStyle = \"black\";\r\n            }\r\n        };\r\n        const resize = () => {\r\n            canvas.width = Math.min(window.innerWidth, gameConfig.maxWidth);\r\n            canvas.height = window.innerHeight;\r\n            render();\r\n        };\r\n        resize();\r\n        const registerHit = (xPos: number) => {\r\n            if (xPos === tilePositions.slice(-2)[0]) {\r\n                setScore(score => score + 1);\r\n                // todo-high: use javascript.info animation approach to increase fps\r\n                const interval = setInterval(() => {\r\n                    if ((offsetPerc += 0.15) >= 1) {\r\n                        clearInterval(interval);\r\n                        offsetPerc = 0;\r\n                        tilePositions.pop();\r\n                        tilePositions.unshift(getRandomTilePos());\r\n                    }\r\n                    render();\r\n                }, 5);\r\n            } else {\r\n                console.log(\"Wrong tile\", xPos, tilePositions.slice(-2)[0]);\r\n                // tilePositions = resetTilePositions();\r\n                setScore(0);\r\n            }\r\n            render();\r\n        };\r\n        const canvasClick = ({ clientY, clientX }: { clientY: number, clientX: number; }) => {\r\n            // let boundingClientReact = canvas.getBoundingClientRect();\r\n            // let canvasX = clientX - boundingClientReact.left;\r\n            // let canvasY = clientY - boundingClientReact.top;\r\n            let canvasX = clientX;\r\n            let canvasY = clientY;\r\n            const tileSize = getTileSize();\r\n            if (\r\n                canvasY < (tilesQuantity.height - 2) * tileSize.height ||\r\n                canvasY > (tilesQuantity.height - 1) * tileSize.height\r\n            ) return;\r\n            const xPos = Math.ceil(canvasX / (canvas.width / tilesQuantity.width)) - 1;\r\n            registerHit(xPos);\r\n        };\r\n        const pointerHandle = (event: PointerEvent) => {\r\n            activeInput = \"touch\";\r\n            // todo investigate\r\n            canvasClick({ clientY: event.offsetY, clientX: event.offsetX });\r\n        };\r\n        const cancelTouchMove = (event: TouchEvent) => event.preventDefault();\r\n        window.addEventListener(\"resize\", resize);\r\n        canvas.addEventListener(\"pointerdown\", pointerHandle);\r\n        canvas.addEventListener(\"touchstart\", cancelTouchMove);\r\n\r\n        // handle keyboard & gamepad input\r\n        const keyboard = new Keyboard();\r\n        const gamepad = new Gamepad();\r\n\r\n        let inputReleased = true;\r\n\r\n        const interval = setInterval(() => {\r\n            // todo fix types\r\n            let somethingWasPressed = false;\r\n            for (const tileNumber in controlsMap) {\r\n                const [keyboardKey, gamepadButton] = controlsMap[tileNumber].split(\" \");\r\n                const pressed = controlsOr(\r\n                    keyboard.key(keyboardKey),\r\n                    keyboard.key(tileNumber),\r\n                    gamepad.button(gamepadButton),\r\n                ).query();\r\n                if (!pressed) continue;\r\n                somethingWasPressed = true;\r\n                if (inputReleased) registerHit(+tileNumber - 1);\r\n                break;\r\n            }\r\n            inputReleased = !somethingWasPressed;\r\n            if (somethingWasPressed && gamepad.isConnected()) activeInput = \"gamepad\";\r\n        }, 10);\r\n        const detectKeyboardInput = () => {\r\n            activeInput = \"keyboard\";\r\n            render();\r\n        };\r\n        window.addEventListener(\"keydown\", detectKeyboardInput);\r\n        return () => {\r\n            window.removeEventListener(\"resize\", resize);\r\n            canvas.removeEventListener(\"pointerdown\", pointerHandle);\r\n            canvas.removeEventListener(\"touchstart\", cancelTouchMove);\r\n            window.removeEventListener(\"keydown\", detectKeyboardInput);\r\n            clearInterval(interval);\r\n        };\r\n    }, []);\r\n\r\n    return <>\r\n        <Button\r\n            className={classes.backButton}\r\n            hidden={score !== 0}\r\n            href=\"/\"\r\n            color=\"primary\"\r\n        // doesn't work properly with startIcon for some reason\r\n        >\r\n            <ArrowBackIos />Back\r\n        </Button>\r\n        <Grid container justifyContent=\"center\">\r\n            <canvas\r\n                ref={canvasRef}\r\n                className={classes.canvas}\r\n            />\r\n        </Grid>\r\n        <Typography\r\n            align=\"center\"\r\n            color=\"error\"\r\n            className={classes.score}\r\n            variant=\"h3\"\r\n        >{score}</Typography>\r\n    </>;\r\n};\r\n\r\nexport default Game;\r\n","import React from \"react\";\r\n\r\nimport { Link as RouterLink } from \"react-router-dom\";\r\n\r\nimport { Button, Checkbox, Grid, Link, Slider, Typography } from \"@material-ui/core\";\r\n\r\nimport { gameConfig } from \"./Game\";\r\n\r\ninterface GameMode {\r\n    label: string;\r\n    id: string;\r\n}\r\n\r\nconst gameModes: GameMode[] = [{\r\n    label: \"Peak\",\r\n    id: \"peak\"\r\n}];\r\n\r\nconst BigText: React.FC<React.ComponentProps<typeof Typography>> = (props) => {\r\n    return <Typography gutterBottom align=\"center\" {...props} />;\r\n};\r\n\r\nconst MainMenu: React.FC = () => {\r\n    return <>\r\n        <Grid container direction=\"column\" justify=\"flex-start\" alignContent=\"center\" style={{ padding: 50 }}>\r\n            <BigText variant=\"h3\">Piano Tiles online</BigText>\r\n            <BigText variant=\"h5\" color=\"textSecondary\">Select Game Mode</BigText>\r\n            {\r\n                gameModes.map(({ id: modeId, label }) =>\r\n                    <Button\r\n                        key={modeId}\r\n                        component={RouterLink}\r\n                        to={`/game/${modeId}`}\r\n                        variant=\"outlined\"\r\n                        size=\"large\"\r\n                    >{label}</Button>\r\n                )\r\n            }\r\n            <BigText variant=\"h5\" color=\"textSecondary\">Game Grid Configuration</BigText>\r\n            <Grid container style={{ width: \"auto\" }}>\r\n                {\r\n                    ([\"width\", \"height\"] as (keyof typeof gameConfig.tilesQuantity)[]).map(prop => {\r\n                        const min = prop === \"height\" ? 2 : 1;\r\n                        return <>\r\n                            <Typography>{prop}</Typography>\r\n                            <Slider\r\n                                key={prop}\r\n                                defaultValue={gameConfig.tilesQuantity[prop]}\r\n                                valueLabelDisplay=\"auto\"\r\n                                step={1}\r\n                                min={min}\r\n                                max={8}\r\n                                onChange={(_, val) => gameConfig.tilesQuantity[prop] = val as number}\r\n                                marks\r\n                            />\r\n                        </>;\r\n                    })\r\n                }\r\n                <Typography>\r\n                    <Checkbox\r\n                        defaultChecked={gameConfig.showKeyboardOrGamepadHints}\r\n                        onChange={(_, checked) => gameConfig.showKeyboardOrGamepadHints = checked}\r\n                    />Show keyboard & gamepad hints\r\n                </Typography>\r\n            </Grid>\r\n            <Link color=\"textSecondary\" href=\"https://github.com/zardoy/piano-tiles\" style={{ position: \"absolute\", bottom: 0, right: 0, }}>View on GitHub</Link>\r\n        </Grid>\r\n    </>;\r\n};\r\n\r\nexport default MainMenu;","import React from \"react\";\r\n\r\nimport { MemoryRouter, Redirect, Route, Switch } from \"react-router-dom\";\r\n\r\nimport { CssBaseline } from \"@material-ui/core\";\r\n\r\nimport Game from \"./Game\";\r\nimport MainMenu from \"./MainMenu\";\r\n\r\nconst App: React.FC = () => {\r\n    return <>\r\n        <CssBaseline />\r\n        <MemoryRouter>\r\n            <Switch>\r\n                <Route path=\"/\" exact>\r\n                    <MainMenu />\r\n                </Route>\r\n                <Route path=\"/game/:modeId\">\r\n                    <Game />\r\n                </Route>\r\n                <Redirect from=\"/\" to=\"/\" />\r\n            </Switch>\r\n        </MemoryRouter>\r\n    </>;\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nimport \"./global.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}